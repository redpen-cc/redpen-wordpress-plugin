<?php
require_once 'mocks.php';
global $registered_hooks, $redpen_proxy_url;

require_once dirname(__FILE__) . '/../redpen.php';

class RedPenTest extends PHPUnit_Framework_TestCase {

    public function testBaseUrlIsUsingProxy() {
        global $redpen_proxy_url;
        $this->assertEquals($redpen_proxy_url, 'http://localhost/wp-content/plugins/redpen/proxy.php/');
    }

    public function testMetaboxesHookIsRegistered() {
        global $registered_hooks;
        $this->assertEquals('redpen_add_meta_boxes', $registered_hooks['add_meta_boxes']);
    }

    public function testSeparateMetaBoxesForErrorsAndConfiguration() {
        global $registered_meta_boxes;

        redpen_add_meta_boxes();

        $this->assertEquals(array('redpen-errors', '<span class="redpen-red">Red</span>Pen <span class="redpen-title"></span>', 'redpen_errors_content', array('post', 'page'), 'advanced', 'high'),
           $registered_meta_boxes['redpen-errors']);

        $this->assertEquals(array('redpen-config', '<span class="redpen-red">Red</span>Pen configuration (<span class="redpen-lang"></span>)', 'redpen_config_content', array('post', 'page'), 'advanced', 'low'),
           $registered_meta_boxes['redpen-config']);
    }

    public function testRedpenJsPathIsCorrectlyResolved() {
        global $redpen_proxy_url;
        $expected_path = str_replace('/', '\\/', $redpen_proxy_url . 'js/redpen.js');
        $this->expectOutputRegex('/<script src="'.$expected_path.'"><\\/script>/');
        redpen_init();
    }

    public function testPluginJsPathIsCorrectlyResolved() {
        $expected_path = str_replace('/', '\\/', 'http://localhost/wp-content/plugins/redpen/js/plugin.js');
        $this->expectOutputRegex('/<script src="'.$expected_path.'"><\\/script>/');
        redpen_init();
    }

    public function testRedPenPluginIsStartedForPlainTextEditor() {
        global $redpen_proxy_url;
        $expected_url = str_replace('/', '\\/', $redpen_proxy_url);
        $this->expectOutputRegex('/new RedPenPlugin\(\'' . $expected_url . '\'\).autoValidate\(\'#content\'\)/');
        redpen_init();
    }

    public function testRedPenPluginIsStartedForVisualEditor() {
        global $registered_hooks;
        $this->assertEquals('start_redpen_on_tinymce_init', $registered_hooks['tiny_mce_before_init']);
        $settings = start_redpen_on_tinymce_init(array());
        $this->assertEquals("function(editor) {redpenPlugin.autoValidate(editor)}", $settings['setup']);
    }
}
?>