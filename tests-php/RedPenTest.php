<?php
require_once 'mocks.php';
global $registered_hooks, $enqueued_resources, $options, $redpen_proxy_url;

require_once dirname(__FILE__) . '/../redpen.php';

class RedPenTest extends PHPUnit_Framework_TestCase {

    public function testRedPenBaseUrlIsInitializedToDefaultValue() {
        global $options;
        $this->assertEquals('https://redpen.herokuapp.com/', redpen_base_url());
        $this->assertEquals('https://redpen.herokuapp.com/', $options['redpen_base_url']);
    }

    public function testRedPenBaseUrlCanBeChanged() {
        global $options;
        $options['redpen_base_url'] = 'http://localhost:8080/';
        $this->assertEquals('http://localhost:8080/', redpen_base_url());
        $this->assertEquals('http://localhost:8080/', $options['redpen_base_url']);
    }

    public function testResourcesAreAddedToHeadOfEditorPage() {
        global $enqueued_resources;
        redpen_head('post.php');

        $this->assertEquals('https://redpen.herokuapp.com/js/redpen.js', $enqueued_resources['redpen-api']);
        $this->assertEquals('http://localhost/wp-content/plugins/redpen/js/editor.js', $enqueued_resources['redpen-editor']);
        $this->assertEquals('http://localhost/wp-content/plugins/redpen/js/plugin.js', $enqueued_resources['redpen-plugin']);
        $this->assertEquals('http://localhost/wp-content/plugins/redpen/css/redpen.css', $enqueued_resources['redpen-styles']);
    }

    public function testResourcesAreAddedToHeadOfNewPostPage() {
        global $enqueued_resources;
        redpen_head('post-new.php');
        $this->assertEquals('http://localhost/wp-content/plugins/redpen/js/plugin.js', $enqueued_resources['redpen-plugin']);
    }

    public function testResourcesAreNotAddedOnWrongPages() {
        global $enqueued_resources;
        redpen_head('edit.php');
        $this->assertEquals(count($enqueued_resources), 0);
    }

    public function testMetaboxesHookIsRegistered() {
        global $registered_hooks;
        $this->assertEquals('redpen_add_meta_boxes', $registered_hooks['add_meta_boxes']);
    }

    public function testSeparateMetaBoxesForErrorsAndConfiguration() {
        global $registered_meta_boxes;

        redpen_add_meta_boxes('post', 123);

        $this->assertEquals(array('redpen-errors', '<span class="redpen-red">Red</span>Pen <span class="redpen-title"></span>', 'redpen_errors_content', null, 'advanced', 'high'),
           $registered_meta_boxes['redpen-errors']);

        $this->assertEquals(array('redpen-config', '<span class="redpen-red">Red</span>Pen configuration', 'redpen_config_content', null, 'advanced', 'low'),
           $registered_meta_boxes['redpen-config']);
    }

    public function testRedPenPluginIsStartedForPlainTextEditor() {
        global $redpen_base_url;
        $expected_url = str_replace('/', '\\/', $redpen_base_url);
        $this->expectOutputRegex('/new RedPenPlugin\(\'' . $expected_url . '\'\).autoValidate\(\'#content\', \'.wp-switch-editor.switch-html\'\)/');
        redpen_config_content(123);
    }

    public function testRedPenPluginIsStartedForVisualEditor() {
        global $registered_hooks;
        $this->assertEquals('redpen_start_on_tinymce_init', $registered_hooks['tiny_mce_before_init']);
        $settings = redpen_start_on_tinymce_init(array());
        $this->assertEquals("function(editor) {redpenPlugin.autoValidate(editor, '.wp-switch-editor.switch-tmce')}", $settings['setup']);
    }
}
?>